"목표를 높게 잡아 실패하는 것은 문제가 아니다.
 목표를 낮게 잡아 이루는 것은 큰 문제다."
 - 미켈란젤로

"가능하다고 생각하든, 불가능하다고 생각하든 당신은 옳다."
- 헨리 포드

"'그 정도면 괜찮아'는 괜찮은게 아닙니다. 더 좋을수 있었다면,
 '좋다'는 괜찮은게 아닙니다. 최고가 될 수 있었다면"

"You keep standing, No matter what you don't give up!"

"How are you living? 어떻게 살 것인가?"

https://www.youtube.com/watch?v=Xog9butPfZk


# @vue/cli

"개발 환경을 빠르게 세팅할 수 있도록 도와주는 툴"

- node.js 설치 - LTS 버전 권장
  버전 확인 : node --version
- vue cli 설치 - 공식 홈페이지 참고
  npm install -g @vue/cli
  버전 확인 : vue --version


# @vue/cli 로 프로젝트 생성

- create
  vue create <project name>
    1) preset : Manually ...
    2) features : Babel, Router, Vuex
    3) history mode for router? : y
    4) config : package.json
    5) save preset : n
- test
  cd <project name>
  npm run serve
  http://localhost:8080 접속
  * 포트 변경은 package.json 파일의 serve 항목에 --port <number> 추가


# Vue plugin (플러그인) 설치 : Vuetify

"bootstrap 같은 건데, Vue에 특화된 거다. Vue 컴포넌트로 구성되어 있음"
"해당 프로젝트로 가서 vue cli 를 이용해 vue plugin 으로 설치함"

- vuetify 추가
  vue add vuetify
    1) pre-made template : y
    2) custom theme : n
    3) custom properties : n
    4) select icon font : font awesome5
    5) babel/polyfill : y   => IE11 지원
    6) locale : en


# Component - Vue 의 핵심

- 컴포넌트 생성
  @vue/cli 로 프로젝트 생성 후
  src/components 폴더에 Parent.vue, Child.vue 가 존재할때...

  방법 1) local 등록
    --- Parent.vue ---
    <template>
      <div>
        <ChildComp></ChildComp>
      </div>
    </template>

    <script>
      import ChildComp from "./Child"
      export default {
        components: {
          ChildComp
        }
      }
    </script>

  방법 2) global 등록
    --- main.js ---
    import ChildComp from "./components/Child"
    Vue.component('AppChild', ChildComp)

    --- Parent.vue ---
    <template>
      <div>
        <AppChild></AppChild>
      </div>
    </template>

- components 끼리 이벤트 주고 받기
  src/components 폴더에 User.vue, UserDetail.vue, UserEdit.vue 가 존재
  User          <- parent
    UserDetail  <- child
    UserEdit    <- child

  기본적으로 아래와 같이 구성되어 있다.

  --- App.vue ---
  <script>
    import User from "./components/User"

    export default {
      components: {
        User
      }
    }
  </script>

  --- User.vue ---
  <template>
    <div>
      <p>{{ name }}</p>
      <button v-on:click="changeName()">change name</button>
      <UserDetail></UserDetail>
      <UserEdit></UserEdit>
    </div>
  </template>

  <script>
    import UserDetail from "./UserDetail"
    import UserEdit from "./UserEdit"

    export default {
      components: {
        UserDetail,
        UserEdit
      },
      data () {
        return {
          name: "anonymous"
        }
      },
      methods: {
        changeName() {
          this.name = "HOHO"
        }
      }
    }
  </script>

  1) parent -> child (v-bind, props)
    User 에서 버튼 클릭으로 변경된 name 을 UserDetail 로 전달하기...

    부모는 bind 로 값 전달
    --- User.vue ---
    <template>
      <div>
        <UserDetail v-bind:nameOfChild="name"></UserDetail>
      </div>
    </template>

    자식은 props 로 해당 값을 받음
    --- UserDetail.vue ---
    <template>
      <div>
        <p>{{ nameOfChild }}</p>
      </div>
    </template>

    <script>
    export default {
      props: ['nameOfChild']
      또는
      props: {
        nameOfChild: {
          type: String,
          required: true
        }
      }
    }
    </script>

  2) child -> parent ($emit -> @)

    $emit() 호출
    --- UserEdit.vue ---
    <template>
      <div>
        <v-text-field
          label="Regular"
          v-model="name"
        ></v-text-field>
        <button @click="changeUser">update user</button>
      <div>
    </template>

    <script>
    export default {
      props: ['name', 'address', 'phone', 'hasDog'],
      data () {
        return {
          user: {}
        }
      }
      methods: {
        changeUser () {
          console.log(this.user)
          this.$emit('child', this.user)
        }
      }
    }
    </script>

    child 에서 호출한 $emit 이 도착하면 자동 호출할 함수 등록 - 그 함수 안에서 작업 한다.
    -> "child 라는 시그널이 왔을때 parents 함수를 실행해줘~"
    --- User.vue ---
    <template>
      <div>
        <UserEdit
          :name="name"
          :address="address"
          :phone="phone"
          :hasDog="hasDog"
          @child="parents"
        ></UserEdit>
      <div>
    </template>

    <script>
    export default {
      data () {
          return {
            name="hoho",
            address="seoul",
            phone="1234-5678",
            hasDog=true
          }
      },
      methods: {
        parents (user) {
          console.log("OK, I received")
          this.name = user.name
        }
      }
    }
    </script>

  3) child -> child  (eventbus : $emit -> $on)
    UserEdit -> UserDetail 이벤트(User 정보 변경 시간) 전송

    global 위치인 main.js 에서 필요한 eventbus 를 생성 후 export
    --- main.js ---
    export const eventBus = new Vue()
    new Vue({
      ...
    })

    해당 eventbus 를 import 후 methods 내에서 $emit() 호출하여 데이터 전달
    --- UserEdit.vue ---
    <script>
      import {{ eventBus }} from "../main"
      export default {
        ...
        methods: {
          changeUser () {
            console.log(this.user)
            this.$emit('child', this.user)
            eventBus.$emit("userWasEdited", new Date())
          }
        }
      }
    </script>

    전달된 eventBus 를 받아 그 값을 활용, 전달받은 값을 저장할 data 'editedDate' 생성
    -> 형제 컴포넌트 끼리는 (부모-자식과 달리) 서로 참조하지 않으니,
       컴포넌트호출 부분에서 리스너 함수를 등록할 수 없다.
    -> life cycle 함수 created() 에서 리스너를 등록하면 됨
    --- UserDetail.vue ---
    <template>
      <div>
        <p>{{ editedDate }}</p>
      </div>
    </template>
    <script>
      import {{ eventBus }} from "../main"
      data () {
        return {
          editedDate: null
        }
      },
      created() {
        // $on(signal, callback function)
        // callback 함수는 arrow 함수 형태로 사용 (그래야 내부에서 this 가 먹힌다.)
        eventBus.$on('userWasEdited', date => {
          this.editedDate = date
        })
      }

    여기까지 event bus 설명 완료!!
    event bus 는 global 이므로, 공통함수를 미리 만들어서 편하게 쓸 수 도 있음
    필요한 메소드를 직접 구현
    --- main.js ---
    export const eventBus = new Vue({
      methods: {
          userWasEdited(date) {
            this.$emit("userWasEdited", date)
          }
      }
    })

    eventBus 객체에 정의된 userWasEdited() 메소드를 직접 호출
    --- UserEdit.vue ---
    <script>
      import {{ eventBus }} from "../main"
      export default {
        ...
        methods: {
          changeUser () {
            console.log(this.user)
            this.$emit('child', this.user)
            // eventBus.$emit("userWasEdited", new Date())
            eventBus.userWasEdited(new Data())
          }
        }
      }
    </script>


# router

* 관련 예제는 vue-router-self
* 프로젝트에 package.json 파일이 존재하면 "npm install" 명령으로 설치 후 실행한다.

- router 프로젝트 생성
  @vue/cli 로 기본 create 후 router 옵션 선택 -> router/index.js 파일 자동 생성됨

  * 처음에 router 옵션 선택하지 않아도, 나중에 아래 명령으로 router 추가하면 됨
    vue add router

- router 구조 세팅
  --- router/index.js ---
  1) import
  import Home from '../views/Home.vue'

  2) routes 배열에 추가 : [{path:, name:, component:}]
  const routes = [
    {
      path: '/',
      name: 'home',
      component: Home
    },
  ]

  3) App.vue 에 아래 태그로 router 표시할 위치 지정
  <router-view></router-view>

- 코드에서 router 제어 : "$router" 사용
  --- App.vue ---
  다음 3 가지 방법으로 router 제어 가능
  1) 단순 경로
    <v-list-tile @click="$router.push('/')"> 또는
  2) 객체
    <v-list-tile @click="$router.push({name: 'home'})"> 또는
    <v-list-tile @click="$router.push({path: '/'})">
    => 객체 형태로 전달 => 다른 파라미터도 전달 가능
  3) router 키워드로 전달
    <router-link :to="{name: 'home'}" exact>
      go to home
    </router-link>
    * vuetify 에서는...
    <v-list-tile router :to="{name: 'home'}">

- router 값 전달하기 : params
  localhost:8080/users/123 형식으로 값(123)을 전달할때...
  --- router/index.js ---
  const routes = [
    {
      path: '/users/:uid',
      name: 'users',
      component: () => import(/* webpackChunkName: "users" */ '../views/Users.vue')
    }
  ]

  이 값을 받아 사용하려면...
  --- Users.vue ---
  <template>
  <div>
    <h1>Users</h1>
    <p>userId = {{ userId }}</p>
  </div>
  </template>

  <script>
  export default {
    computed: {
      userId() {
          return this.$route.params.uid
      }
    }
  }
  </script>

  * $router vs $route
  간단하게 콘솔로 찍어서 inpection 으로 보면...
  created: {
    console.log("router", this.$router)
    console.log("route", this.$route)
  }

  router : VueRouter  (진짜 VueRouter, router/index.js 에서 new VueRouter 명령으로 생성했음 )
  route  : Object (router 로 넘어온 현재 페이지와 관련된 객체 )

- App.vue 의 Navigation 메뉴에서도 params 를 입력해보자.
  --- App.vue ---
  아래처럼 객체로 전달하면, params 값을 주기도 편하다.
  <v-list-item router :to="{name: 'users', params: {uid: 13579}}" exact>

  * 근데 이렇게 명시적으로 params 를 직접 전달하면, router/index.js 에서 :uid 식으로 선언하지 않아도
    해당 params 값을 정상적으로 받을 수 있다.

- router 값 전달하기 : query
  웹 사이트 주소를 보면 아래와 같은 형식이 자주 보인다. 이처럼 사용하는 법에 대한 설명...
  http://localhost:8080/users/13579?group=member&category=trial

  query 설정
  --- App.vue ---
  <v-list-item router
  :to="{
    name: 'users',
    params: {uid: 13579},
    query: {
      group: 'member',
      category: 'trial'
    }
  }" exact>

  query 수신 설정 : $route.query 에 다 저장됨 -> 편하게 가져다 쓰면됨
  --- Users.vue ---
  <template>
    <div>
      <p>Group = {{ $route.query.group }}</p>
      <p>Category = {{ $route.query.category }}</p>
    </div>
  </template>

  * 주소창에 임의의 query 값을 넣어도, $route.query 에 모두 저장됨
    -> 편하면서도 위험한데? ㅎ

  * params vs query
    params : 주소창에 안보임
    query  : 주소창에 다 보임


# vuex
- 중앙 저장소 개념, 너무 편리하다.
- 개념 완벽 이해 예제 : https://itnext.io/vuex-made-simple-getting-started-6bf229d432cf

- 간단 사용법
  vue create <project> 에서 'vuex' 옵션 선택
  -> src/store/index.js 파일 존재

  먼저 선언한다.
  mutations 함수의 첫번째 인자(state) 와 actions 함수의 첫번째 인자(context) 는 고정!
  각각 state 로 state 멤버에 접근하고, context.commit() 으로 mutation 접근한다.
  --- store/index.js ---
  export default new Vuex.Store({
    state: {
      totalTvCount: 10,
      isLarryHappy: true,
      isJennyHappy: true
    },
    getters: {
      happyStaff: state => {
        return state.isLarryHappy && state.isJennyHappy
      }
    },
    mutations: {
      removeTv(state, amount) {
        state.totalTvCount -= amount
      }
    },
    actions: {
      removeTv(context, amount) {
        if(context.state.totalTvCount >= amount) {
          context.commit('removeTv', amount)
        }
      }
    },
    modules: {
    }
  })

  원하는 컴포넌트에서 불러 쓴다.
  script 태그에서 import, computed/methods, ...mapState/mapGetters/mapActions 확인 (this 필요)
  template 태그에서 local data 처럼 사용가능 (this 필요없음)
  --- Customer.vue ---
  <template>
  <div class="customer">
    <h1>I'm a customer</h1>
    <p>I see {{ totalTvCount }} TVs!</p>
    <p v-show="happyStaff">The staff seems happy!</p>
    <p v-show="!totalTvCount">I can't buy any...</p>
    <button
        :disabled="!totalTvCount"
        @click="buyTv">
        Buy TV
    </button>
    <button
        :disabled="totalTvCount < 2"
        @click="buyTwoTvs">
        Buy Two TVs
    </button>
  </div>
  </template>

  <script>
  // object spread operators
  import { mapState, mapGetters, mapActions } from 'vuex'

  export default {
    name: "Customer",
    computed: {
      // simple version
      //totalTvCount() { return this.$store.state.totalTvCount },
      //happyStaff() { return this.$store.getters.happyStaff }
      ...mapState(['totalTvCount']),
      ...mapGetters(['happyStaff'])
    },
    methods: {
      ...mapActions(['removeTv']),
      buyTv() {
        // simple version
        //this.$store.dispatch('removeTv', 1)
        this.removeTv(1)
      },
      buyTwoTvs() {
        // simple version
        //this.$store.dispatch('removeTv', 2)
        this.removeTv(2)
      }
    }
  }
  </script>

  <style scoped>
  </style>



# Axios

- 설치
  @vue/cli 로 프로젝트 생성
  해당 폴더로 이동
  아래 명령어 실행 (--save 를 붙여야 package.json 파일에 포함됨)
  npm install axios --save

* 유용한 웹사이트
  1) reqres.in
     fake server - RESTful API 테스트용 웹사이트
                   인터넷에 fake server 가 많은가봐...
  2) getpostman.com
     API 테스트용 앱 (매우 훌륭하다!)
     웹 프론트엔드, 백엔드 개발 시 테스트 목적으로 최고!

- axios get/post 테스트
  : 공식 웹사이트에 설명이 잘 되어 있다.  https://github.com/axios/axios
    => 몇 가지 사용법이 있으니 잘 숙지 할 것. (sync/async)
    => 실전에서는 내용이 살짝 다를 수 있는데, 아래 예제 코드와 비교하면 쉽게 적용 가능하다.

  import axios 주목
  axios.get() 호출 이후 .then, .catch, .finally 에서 arrow function 사용하는 부분 주목
    => arrow function 을 사용해야 data 멤버에 this. 로 접근 가능!

  --- Login.vue ---
  <template>
    <v-btn @click="getTest">get TEST</v-btn>
    <v-btn @click="postTest">post TEST</v-btn>
  </template>

  <script>
  import axios from "axios"

  export default {
    name: "login",
    data () {
    },
    methods: {
      getTest() {
        axios.get('https://reqres.in/api/users?page=2')
          .then(res => {
            console.log(res)
          })
          .catch(err => {
            console.log(err)
          })
          .finally( () => {
          })
      },
      postTest() {
        axios.post('https://reqres.in/api/register', {
            "email": "eve.holt@reqres.in",
            "password": "pistol"
          })
          .then(res => {
            console.log(res)
          })
          .catch(err => {
            console.log(err)
          })
          .finally( () => {
          })
      }
    }
  }
  </script>


- 새로고침 했을 때 로그인창 뜨지 않도록 token 을 localStorage 에 저
* local storage 에 로그인 token 저장/불러오기 기법 사용
  -> localStorage.setItem('key_name': value)
  -> value = localStorage.getItem('key_name')


  --- main.js ---
  new Vue({
    router,
    store,
    vuetify,
    beforeCreate() {
      this.$store.dispatch('getMemberInfo')
    },
    render: h => h(App)
  }).$mount("#app");


*** Lorem Picsum : The Lorem Ipsum for photos
  => https://picsum.photos/

  * "Free Placeholder images" 로 검색하면 꽤 많이 나온다.
    picsum 서버가 불안정하면 다른 사이트로 가면 된다.

  와~ 진짜 짱이다~ ^^

  full size 와 원하는 size 가 제공된다.

  - random image (200*300)
    https://picsum.photos/200/300

  - square image (200*200)
    https://picsum.photos/200

  - specific image (id=237, 200*300)
    https://picsum.photos/id/237/200/300

  - specific image & size
    https://picsum.photos/500/300?image=345
    https://i.picsum.photos/id/345/500/300.jpg

  - grayscale, blur, paging, image detail


### 동적으로 이미지를 변화시킬때 사용하는 기법

아래 코드에서 <v-img> 태그를 눈여겨 볼것...
  :src, :lazy-src
  "`https://

<v-img
:src="`https://picsum.photos/200/150?image=${pic_id}`"
:lazy-src="`https://picsum.photos/20/15?image=${pic_id}`"

--- picCard.vue ---
<template>
  <div>
    <v-row align="center" justify="center">
      <v-img
        :src="`https://picsum.photos/200/150?image=${pic_id}`"
        :lazy-src="`https://picsum.photos/20/15?image=${pic_id}`"
        class="grey lighten-2"
        max-width="160"
        max-height="120"
      >
        <template v-slot:placeholder>
          <v-row
            class="fill-height ma-0"
            align="center"
            justify="center"
          >
            <v-progress-circular indeterminate color="grey lighten-5"></v-progress-circular>
          </v-row>
        </template>
      </v-img>
    </v-row>
    {{ pic_id }}
  </div>
</template>


### random 함수
  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }

### sleep 함수
    const sleep = (milliseconds) => {
      return new Promise(resolve => setTimeout(resolve, milliseconds))
    }
    sleep(500).then(() => {
      alert("Congratulation!", this.tryCount)
    })


### vue : javascript 코드에서 local image 불러오기 => image 를 동적 변경
    -> requre() 필요...
    -> '@' 이가 아닌 상대/절대 경로 사용
    -> 예제 : "vue-card-game"

<template>
  <div>
    <v-img :src="image1"> </v-img>
  </div>
</template>

<script>
export default {
  data() {
    return {
      image1: require("../assets/logo.png"),
      image2: "https://picsum.photos/200/120?image=10"
    }
  }
}
